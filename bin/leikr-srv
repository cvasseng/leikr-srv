
var tile = require('../lib/lei.tile'),
		world = require('../lib/lei.world'),
		common = require('../lib/lei.common'),
		actors = require('../lib/lei.actor'),
		_minables = require('./../data/game/config/minables.json'),
		_wildlife = require('../lib/lei.ai.wildlife'),
		_rest = require('../lib/lei.rest'),
		fs = require('fs'),
		express = require('express'),
		app = express(),
		server = require('http').createServer(app),
		io = require('socket.io').listen(server, { log: false }),
		_item = require('../lib/lei.item');


common.printFile('welcome.msg');
console.log('Starting Leikr..'.black.bold);
console.log('');





function ValueNoise(width, height, startOctave, endOctave, persistence, smoothAmount, postprocess)
{
	var valueNoiseMap = new Float32Array(width * height);

	// We're storing the random data samples in a quadtree
	// octave 0 is the whole area
	// octave 1 is the area divided by 4
	// octave n is the previous octave with each area divided by 4
	var startOctave = 3;
	// Go to the pixel level. This algorithm assumes base 2 area
	var endOctave = 7; //Math.log(width) / Math.log(2) - 2;

	// We need 4 points to do bilinear interpolation from for the noise generation for each octave.
	// This is the summation of Math.pow(2, i + 1) - Math.pow(2, i) + 1 which represents the
	// number of corners per depth of a quadtree. So depth zero has 4 and depth one has 9.
	var nodeCount = 1 / 3 * (3 * (endOctave + 1) + 3 * Math.pow(2, (endOctave + 1) + 2) + Math.pow(2, 2 * (endOctave + 1) + 2) - 4) -
	                1 / 3 * (3 * startOctave + 3 * Math.pow(2, startOctave + 2) + Math.pow(2, 2 * startOctave + 2) - 4);

	var randomTree = new Float32Array(nodeCount);
	for (var i = 0; i < randomTree.length; ++i)
	{
		randomTree[i] = Math.random();
	}
	// Make it tileable
	for (var i = startOctave; i <= endOctave; ++i)
	{
		var octaveSize = Math.pow(2, i + 1) - Math.pow(2, i) + 1;
		var indexOffset = 1 / 3 * (3 * i  + 3 * Math.pow(2, i + 2) + Math.pow(2, 2 * i + 2) - 4) -
	                         1 / 3 * (3 * startOctave + 3 * Math.pow(2, startOctave + 2) + Math.pow(2, 2 * startOctave + 2) - 4);
		for(var y = 0; y < octaveSize; ++y)
		{
			randomTree[indexOffset + y * octaveSize] = randomTree[indexOffset + y * octaveSize + octaveSize - 1];
		}

		for(var x = 0; x < octaveSize; ++x)
		{
			randomTree[indexOffset + x] = randomTree[indexOffset + (octaveSize - 1) * octaveSize + x];
		}
	}

	for(var y = 0; y < height; ++y)
	{
		for(var x = 0; x < width; ++x)
		{
			valueNoiseMap[y * width + x] = 0;
			for (var i = startOctave; i <= endOctave; ++i)
			{
				var cellSize = width / Math.pow(2, i);

				var integerX = Math.floor(x / cellSize);
				var integerY = Math.floor(y / cellSize);
				var indexOffset = 1 / 3 * (3 * i  + 3 * Math.pow(2, i + 2) + Math.pow(2, 2 * i + 2) - 4) -
				                  1 / 3 * (3 * startOctave + 3 * Math.pow(2, startOctave + 2) + Math.pow(2, 2 * startOctave + 2) - 4);
		
				
				var fractionalX = (x - integerX * cellSize) / cellSize;
				var fractionalY = (y - integerY * cellSize) / cellSize;
				//Log(cellSize + " " + fractionalX + " " + fractionalY);
				var octaveSize = Math.pow(2, i + 1) - Math.pow(2, i) + 1;
				var i1 = Interpolate(randomTree[indexOffset + integerY * octaveSize + integerX],
				                     randomTree[indexOffset + integerY * octaveSize + integerX + 1],
				                     fractionalX);
				var i2 = Interpolate(randomTree[indexOffset + (integerY + 1) * octaveSize + integerX],
				                     randomTree[indexOffset + (integerY + 1) * octaveSize + integerX + 1],
				                     fractionalX);

				valueNoiseMap[y * width + x] += Interpolate(i1 , i2 , fractionalY) * Math.pow(persistence, i - startOctave);
				// Smooth and then normalize at the very end
			}
		}
	}

	Smooth(width, height, valueNoiseMap, smoothAmount);

	Normalize(width, height, valueNoiseMap, 0, 1);

	if (postprocess)
	{
		postprocess(valueNoiseMap);
	}

	return valueNoiseMap;
}

function Smooth(width, height, noise, amount)
{
	// Smooth
	for (var i = 0; i < amount; ++i)
	{
		for (var y = 0; y < height; ++y)
		{
			for(var x = 0; x < width; ++x)
			{
				var xMinus1 = x == 0 ? width - 1 : x - 1;
				var yMinus1 = y == 0 ? height - 1 : y - 1;
				var xPlus1 = (x + 1) % width;
				var yPlus1 = (y + 1) % height;
				var corners = (noise[yMinus1 * width + xMinus1] + 
				               noise[yMinus1 * width + xPlus1] + 
				               noise[yPlus1 * width + xPlus1] + 
				               noise[yPlus1 * width + xMinus1]) / 16.0;
				var sides   = (noise[y * width + xMinus1] + 
				               noise[y * width + xPlus1] + 
				               noise[yMinus1 * width + x] + 
				               noise[yPlus1 * width + x]) / 8.0;
				var center  = noise[y * width + x] / 4.0;
				noise[y * width + x] = corners + sides + center;
			}
		}
	}
}

function Normalize(width, height, noise, minimum, maximum) {
	var min = Number.MAX_VALUE;
	var max = -Number.MAX_VALUE;

	// Calculate min and max range used to normalize with
	for (var y = 0; y < height; ++y) {
		for(var x = 0; x < width; ++x) {
			min = Math.min(min, noise[y * width + x]);
			max = Math.max(max, noise[y * width + x]);
		}
	}

	// Normalize the range to 0 to 1
	for (var y = 0; y < height; ++y) {
		for(var x = 0; x < width; ++x) {
			noise[y * width + x] = (noise[y * width + x] - min) / (max - min) * (maximum - minimum) + minimum;
		}
	}
}

function Interpolate(a, b, x) {
	var ft = x * 3.1415927;
	var f = (1 - Math.cos(ft)) * 0.5;
	return a * (1 - f) + b * f;
}


function genMap() {
	var width = 100, height = 50, surfaceY = 40, highY = 10;

	//Generate surface
	surfaceHeight = ValueNoise(width, 1, 3, 7, 0.6, 10);

	//Put the surface line in
	for (var x = 0; x < width; x++) {
		var y = highY + Math.floor(surfaceHeight[x] * 20);
		

		//Fill downwards until we hit the surface Y
		for (var y2 = y; y2 < surfaceY; y2++) {
			world.setTile(x, y2, tile.create(2, 0, 1, 1, 0));
		}

	}

	return;

	common.progressLog('Generating raw world data', height * 3);

	noiseMap = ValueNoise(width, height, 3, 7, 0.6, 10, function (noise) {

			for (var y = 0; y < height; ++y)
			{
				for(var x = 0; x < width; ++x)
				{
					noise[y * width + x] = noise[y * width + x] < 0.3 || noise[y * width + x] > 0.7 ? 0.5 : 0;
				}
			}

	});

	common.progressLog('Building world from raw data', width * height);
	for (var y = surfaceY; y < height; y++){
		for (var x = 0; x < width; x++) {
			var t = Math.floor(noiseMap[x + y * width] * 2) * 3;
			var c = t == 3 ? 1 : 0;
			if (c) {
				console.log('added collision at ' + x + ',' + y);
			}
			world.setTile(x, y, tile.create(t, 0, c, 0, 0));
			//console.log(Math.floor(noiseMap[x + y * width] * 15)  );
			common.progressLog('Building world from raw data', width * height);
	
		}
	}

}


////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//Called when a projectile is fired
world.on('projectile_fire', function (projectile) {
	io.sockets.emit('projectile_fire', {
		id: projectile.id,
		pos: projectile.pos,
		dir: projectile.dir,
		speed: projectile.speed,
		size: projectile.size,
		spritesheet: projectile.spritesheet
	});

});

////////////////////////////////////////////////////////////////////////////////
//Called when a projectile hits something
world.on('projectile_hit', function (projectile) {
	io.sockets.emit('projectile_hit', projectile.id);
});

world.on('actor_stat_change', function (actor, stat) {

	console.log('stat change ' + JSON.stringify(stat));
		//Damage?
		if (stat.name === 'health' && stat.value < stat.oldValue) {
			//Broadcast hit
			actor.chunks.forEach(function(chunk) {
				io.sockets.in(chunk.id).emit('actor_hit', actor.id);
			});
		}
});

////////////////////////////////////////////////////////////////////////////////
//Called when an actor enters a new chunk
/*
	This is responsible for sending spawn messages to everyone in the chunk.
*/
world.on('actor_enter_chunk', function (actor, chunk) {
	//Send spawn message
	io.sockets.in(chunk.id).emit('spawn', actor.createFullUpdateObject());
});

////////////////////////////////////////////////////////////////////////////////
//Called when an actor leaves a chunk
/*
	This is responsible for sending despawn messages to everyone in the chunk.
*/	
world.on('actor_leave_chunk', function (actor, chunk) {
	//Send a despawn message to the chunk
//	console.log('Actor ' + actor.id + ' left chunk ' + chunk.id);
	io.sockets.in(chunk.id).emit('despawn', actor.id);
});

world.on('actor_move', function (actor, update) {
	//Broadcast to the chunks belonging to the player
	actor.chunks.forEach(function (chunk) {
		io.sockets.in(chunk.id).emit('actor_update', update);
	});

});

world.on('actor_die', function (actor) {
	actor.chunks.forEach(function (chunk) {
		io.sockets.in(chunk.id).emit('actor_die', actor.id);
	});
});


world.on('log', function (err, msg, status) {
	common.log(msg, err === false, err === false ? undefined : err);
});

world.on('progress', function (err, msg, max) {
	common.progressLog(msg, max);
});

world.on('tile_change', function (chunk, tx, ty, tile) {

	io.sockets.in(chunk.id).emit('tile', {
		tx: tx,
		ty: ty,
		tile: tile
	});

});

//Initialize the world
world.init({
	width:1000,
	height:500
});

_item.fetchAvailable();
genMap();

function createAI() {
	var test = actors.create();
	world.addActor(test);
	_wildlife.create(test);
}

createAI();



////////////////////////////////////////////////////////////////////////////////
//                             RESOURCE GETS
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Get for minables
app.use('/mineables', function (req, res) {
	res.send(_minables);
});

////////////////////////////////////////////////////////////////////////////////
// Get for tileset
app.use('/tileset', function (req, res) {
	res.send('');
});


////////////////////////////////////////////////////////////////////////////////


///Net stuff
server.listen(7523);
app.use(express.bodyParser());
_rest.setup(app);



app.use(express.static(__dirname + '/../public' ));
app.use('/creator', express.static(__dirname + '/../creator' ));

/*
//Get all sprites
app.get('/sprites', function (req, res) {
	//Return a list of items
	fs.readdir(__dirname + '/../data/game/sprites/', function (err, files) {
		r = [];
		files.forEach(function (file) {
			if (file.indexOf('.json') > 0) {
				r.push(JSON.parse(fs.readFileSync(__dirname + '/../data/game/sprites/' + file, 'utf-8')));
			}
		});
		res.send(r);
	});
});

//Get single sprite
app.get('/sprites/:name', function (req, res) {
	console.log("fetching sprite " + req.params.name);
	if (fs.exists(__dirname + '/../data/game/sprites/' + req.params.name + '.json')) {
		var r = {
			properties: JSON.parse(fs.readFileSync(__dirname + '/../data/game/sprites/' + req.params.name + '.json')),
			script:'' 
		};
		res.send(r);
	} else {
		res.send('');
	}
});

//Get config
app.get('/config', function (req, res) {
	//Return a list of items
	res.send([
		{name:'minables', title:'Resources'}
	]);
});

//Get crafting
app.get('/crafting', function (req, res) {
	//Return a list of items
	res.send([
		{name:'minables', title:'Resources'}
	]);
});

//Get tilesets
app.get('/tilesets', function (req, res) {
	//Return a list of items
	res.send(_item.getAvailable());
});

//Get all items
app.get('/items', function (req, res) {
	//Return a list of items
	res.send(_item.getAvailable());
});

//Get single item
app.get('/items/:name', function (req, res) {
	fs.readFile(__dirname + '/../data/game/items/' + req.params.name + '.js', 'utf-8', function (err, data) {
		if (!err) {
			res.send({
				properties:_item.getSingleMeta(req.params.name), 
				source:data
			});
		} else {
			res.send({});
		}
	});
});

//Post item
app.post('/items/:name', function (req, res) {

	console.log('Got post request: ' + JSON.stringify(req.body.properties));

	if (!fs.exists(__dirname + '/../data/game/items/' + req.params.name + '.json')) {

	}

	//Save the properties
	fs.writeFile(__dirname + '/../data/game/items/' + req.params.name + '.json', JSON.stringify(req.body.properties), function (err) {
		_item.fetchAvailable();

		//Save the script
		fs.writeFile(__dirname + '/../data/game/items/' + req.params.name + '.js', req.body.source, function (err) {
			res.send('');
			_item.createModuleForItem(req.params.name);

			//We could add a call to git add <filenames> and git commit here..
		});

	});

});

app.post('/sprite/new/', function (req, res) {
	var propTemplate = JSON.parse(fs.readFileSync(__dirname + '/../data/templates/sprite.tem', 'utf-8'));
	propTemplate.name = req.body.name;

	fs.writeFile(__dirname + '/../data/game/sprites/' + req.body.name + '.json', JSON.stringify(propTemplate), function (err) {
		res.send('');
	});
});

app.post('/item/new/', function (req, res) {
	//Save the properties
	var propTemplate = JSON.parse(fs.readFileSync(__dirname + '/../data/templates/item.tem', 'utf-8'));
	var scriptTemplate = fs.readFileSync(__dirname + '/../data/templates/item.script.tem', 'utf-8');

	propTemplate.name = req.body.name;
	propTemplate.title = req.body.name;

	fs.writeFile(__dirname + '/../data/game/items/' + req.body.name + '.json', JSON.stringify(propTemplate), function (err) {
		_item.fetchAvailable();
		fs.writeFile(__dirname + '/../data/game/items/' + req.body.name + '.js', scriptTemplate, function (err) {
			res.send('');
			_item.createModuleForItem(req.body.name);
		});
	});
});

//Get script
app.get('/script/item/:name', function (req, res) {
	fs.readFile(__dirname + '/../data/game/items/' + req.params.name + '.js', 'utf-8', function (err, data) {
		if (!err) {
			res.send({name:req.params.name, source:data});
		}
	});
});

*/

////////////////////////////////////////////////////////////////////////////////

//This list only contains the other playerss
var players = [];

io.on('connection', function (socket) {
	common.log('New player connected', true);

	//Authorized?
	var isAuthorized = false;
	//The player
	var player = 0;
	//Events that should be cleared when disconnecting
	var eventAttachements = [];

	//////////////////////////////////////////////////////////////////////////////
	// Auth check
	var authCheck = function () {
		if (!isAuthorized) {
			socket.emit('error', {msg:'Not authorized', code:401});
			return false;
		}
		return true;
	};

	//////////////////////////////////////////////////////////////////////////////
	// Attach event listeners to the player
	var attachEvents = function () {
		if (player === 0) {
			return false;
		}

		////////////////////////////////////////////////////////////////////////////
		// Called when the player enters a new chunk
		eventAttachements.push(player.on('enter_chunk', function (chunk) {
			//Join the chunk room
			socket.join(chunk.id);

			//Send the chunk to the player
			socket.emit('chunk', {
				tx: chunk.pos.tx,
				ty: chunk.pos.ty,
				data: chunk.data,
				items: chunk.items,
				size: chunk.size
			});

			console.log('Player ' + player.id + ' entered chunk ' + chunk.id + ' with ' + chunk.actors.length + ' other actors on it');

			//Send all the actors in the chunk to the player
			chunk.actors.forEach(function (actor) {
				console.log('Spawning ' + actor.id + ' for player');
				socket.emit('spawn', actor.createFullUpdateObject());
			});

			

		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when the player leaves a chunk
		eventAttachements.push(player.on('leave_chunk', function (chunk) {
			//Leave the chunk room
			socket.leave(chunk.id);

			//Need to despawn everything that was here
			//This might not be needed if the client can book keep things properly.
			//Future optimization.

			chunk.actors.forEach(function (actor) {
				if (actor.id !== player.id) {
					socket.emit('despawn', actor.id);
				}
			});	

			console.log('Player ' + player.id + ' left chunk ' + chunk.id);
		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when the player collided with something
		eventAttachements.push(player.on('colliding', function () {
			var payload = player.createSmallPacket();
			payload.velocity.x = 0;
			payload.velocity.y = 0;

			//Broadcast to the chunks belonging to the player
			player.chunks.forEach(function (chunk) {
				io.sockets.in(chunk.id).emit('actor_update', payload);
			});
		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when there's a stat change
		eventAttachements.push(player.on('stat_change', function (stat) {

			//Send to player
			socket.emit('stat_change', stat);



		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when the player gets an item
		eventAttachements.push(player.on('item_get', function (itm) {
			//This can be optimized - need only send the ID and name if
			//the data is also located on the client side..
			socket.emit('item_get', {
				id: itm.id,
				name: itm.properties.name,
				title: itm.properties.title,
				description: itm.properties.description,
				cooldown: itm.properties.useCooldown,
				decay: itm.properties.decay,
				tileset: itm.properties.tileset,
				inventoryIcon: itm.properties.inventoryIcon,
				maxStackSize: itm.properties.maxStackSize
			});
		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when the player looses an item
		eventAttachements.push(player.on('item_loose', function (itm) {
			socket.emit('item_loose', itm);
		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when the player is done bumping into shit
		eventAttachements.push(player.on('done_colliding', function () {
			player.chunks.forEach(function (chunk) {
				io.sockets.in(chunk.id).emit('actor_update', player.createSmallPacket());
			});
		}));

		////////////////////////////////////////////////////////////////////////////
		// Called when the player has moved
		eventAttachements.push(player.on('move', function (update) {
			//console.log('Actor moving: ' + player.pos.x + ',' + player.pos.y);
			//Send a reset chunk for debugging
			//io.sockets.emit('actor_update', update);
			//socket.broadcast.emit('actor_update', update);

			//Broadcast to the chunks belonging to the player
		//	player.chunks.forEach(function (chunk) {
			//	io.sockets.in(chunk.id).emit('actor_update', update);
			//});

		}));


		return true;
		
	};

	//////////////////////////////////////////////////////////////////////////////
	// Handle Disconnects
	socket.on('disconnect', function () {
		//Clear event attachements
		eventAttachements.forEach(function (fn) {
			fn();
		});

		//Formally leave the world
		world.playerLeaveWorld(player);
	});

	//////////////////////////////////////////////////////////////////////////////
	// Handle auth
	/*
		This function will authenticate the connection and if it's valid, 
		return a list of the characters the account has.
	*/
	socket.on('auth', function (auth) {
		isAuthorized = true;

		//Emit list of characters and authorization status
		socket.emit('auth', {
			status: 'ok',
			characters: [0]
		});

	});

	//////////////////////////////////////////////////////////////////////////////
	// Log on a character
	/*
		This function is responsible for creating the player.
		It must first authenticate, then it must retreive the ID of the 
		character that it wants to use.
	*/
	socket.on('logon', function (data) {
		if (!authCheck()) {
			//return false;
		}

		//Ok, we can log on to the character.
		player = actors.create({});
		attachEvents();


	  world.playerEnterWorld(player);

	 // var itm = _item.create(player, 'granade');

	  player.giveItem('granade', 100);
	  player.giveItem('slingshot');


		//Send the actor info to the player
		socket.emit('player', {
			id: player.id,
			pos: player.pos,
			velocity: player.velocity,
			movespeed: player.movementSpeed,
			bbox: player.bbox
		});

		players.push(player);

	});

	socket.on('give_item', function (name) {
		player.giveItem(name);
	});

	//////////////////////////////////////////////////////////////////////////////
	// Handle chat messages
	/*
		This will broadcast the packet unless it's a command.
	*/
	socket.on('chat', function (data) {
		//console.log('Chat: ' + data);
		io.sockets.emit('chat', player.name + ': ' + data);
	});


	socket.on('item_use', function (data) {
		player.use(data.id, data.tx, data.ty);
	});

	//////////////////////////////////////////////////////////////////////////////
	//Handle a move message
	socket.on('move', function (data) {
		if (player === 0) {
			return;
		}

		//console.log('Received move packet: ' + JSON.stringify(data));

		if (!data.moving) {
			//player.stopMoving();
			if (data.direction === 'horizontal') {
				player.applyVelocity(0, player.velocity.y);
			} else {
				player.applyVelocity(player.velocity.x, 0);
			}

			socket.emit('player_correction', {
				pos: player.pos
			});
		} else {
			if (data.direction === 'left') player.applyVelocity(-1, player.velocity.y);
			if (data.direction === 'right') player.applyVelocity(1, player.velocity.y);
			if (data.direction === 'up') player.applyVelocity(player.velocity.x, -1);
			if (data.direction === 'down') player.applyVelocity(player.velocity.x, 1);
		}
	});
	
});

common.log('Starting server on port 7523', true);
console.log('');
console.log('Ready for action. Bring it on. SRSLY.'.black.bold);
